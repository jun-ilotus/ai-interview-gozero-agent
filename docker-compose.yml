version: '3.8'

services:
  # 1. ETCD服务注册中心
  etcd:
    image: quay.io/coreos/etcd:v3.5.0
    ports:
      - "2379:2379"
    environment:
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 5s
      timeout: 2s
      retries: 10

  # 2. Redis服务
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 3. PostgreSQL数据库
  postgres:
    image: ankane/pgvector
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: "*****"
      POSTGRES_DB: dayu_ai_agent
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root -d dayu_ai_agent"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 4. MCP服务
  mcp:
    build:
      context: .
      dockerfile: mcp/Dockerfile
    ports:
      - "8066:8066"
    depends_on:
      etcd:
        condition: service_healthy
    environment:
      GO111MODULE: "on"
      GOPROXY: "https://goproxy.cn,direct"

  # 5. API服务
  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    ports:
      - "8123:8123"
    depends_on:
      etcd:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mcp:
        condition: service_started
    environment:
      GO111MODULE: "on"
      GOPROXY: "https://goproxy.cn,direct"

# 数据卷定义
volumes:
  postgres-data: