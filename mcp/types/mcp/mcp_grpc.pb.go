// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: mcp.proto

package mcp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PdfProcessor_ExtractText_FullMethodName = "/mcp.PdfProcessor/ExtractText"
)

// PdfProcessorClient is the client API for PdfProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PDF处理服务定义
type PdfProcessorClient interface {
	// 流式上传PDF并返回解析文本
	ExtractText(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PdfRequest, PdfResponse], error)
}

type pdfProcessorClient struct {
	cc grpc.ClientConnInterface
}

func NewPdfProcessorClient(cc grpc.ClientConnInterface) PdfProcessorClient {
	return &pdfProcessorClient{cc}
}

func (c *pdfProcessorClient) ExtractText(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PdfRequest, PdfResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PdfProcessor_ServiceDesc.Streams[0], PdfProcessor_ExtractText_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PdfRequest, PdfResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PdfProcessor_ExtractTextClient = grpc.ClientStreamingClient[PdfRequest, PdfResponse]

// PdfProcessorServer is the server API for PdfProcessor service.
// All implementations must embed UnimplementedPdfProcessorServer
// for forward compatibility.
//
// PDF处理服务定义
type PdfProcessorServer interface {
	// 流式上传PDF并返回解析文本
	ExtractText(grpc.ClientStreamingServer[PdfRequest, PdfResponse]) error
	mustEmbedUnimplementedPdfProcessorServer()
}

// UnimplementedPdfProcessorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPdfProcessorServer struct{}

func (UnimplementedPdfProcessorServer) ExtractText(grpc.ClientStreamingServer[PdfRequest, PdfResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ExtractText not implemented")
}
func (UnimplementedPdfProcessorServer) mustEmbedUnimplementedPdfProcessorServer() {}
func (UnimplementedPdfProcessorServer) testEmbeddedByValue()                      {}

// UnsafePdfProcessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PdfProcessorServer will
// result in compilation errors.
type UnsafePdfProcessorServer interface {
	mustEmbedUnimplementedPdfProcessorServer()
}

func RegisterPdfProcessorServer(s grpc.ServiceRegistrar, srv PdfProcessorServer) {
	// If the following call pancis, it indicates UnimplementedPdfProcessorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PdfProcessor_ServiceDesc, srv)
}

func _PdfProcessor_ExtractText_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PdfProcessorServer).ExtractText(&grpc.GenericServerStream[PdfRequest, PdfResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PdfProcessor_ExtractTextServer = grpc.ClientStreamingServer[PdfRequest, PdfResponse]

// PdfProcessor_ServiceDesc is the grpc.ServiceDesc for PdfProcessor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PdfProcessor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mcp.PdfProcessor",
	HandlerType: (*PdfProcessorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExtractText",
			Handler:       _PdfProcessor_ExtractText_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "mcp.proto",
}
